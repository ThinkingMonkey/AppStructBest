# vim:encoding=utf-8:ts=2:sw=2:expandtab
# vim:syntax=python


###############################################################################
# **Global** > Local > Global > User > System > User > Global > Local > OUTPUT


class ID(ProjectIdentifier):
  pass

class DevLevel(Integer):
  Description = 'Development level: 0=Production, 1=Preview, 2=Development'

class Postgres(Object):
  class Host(String):
    Default='localhost'
  class Port(Port):
    Default=5432
  class Username(String):
    pass
  class Password(String):
    pass
  class Database(String):
    pass


class FileStruct(FileStruct):
  pass 
  
class Jango(UserPass):
  Description = "JangoMail username and password"

class InternalSite(Site, SSLSite, SiteProxy):
  Description = 'Admin Site.  The URL will typically have best.yoururl.com.'


yield
###############################################################################
# Global > Local > **Global** > User > System > User > Global > Local > OUTPUT

import re

ID = 'AppStructBest'

match = re.search('DevLevel\\.([0-9])', Path)
if match:
  DevLevel = int(match.group(1))

yield
###############################################################################
# Global > Local > Global > User > System > User > **Global** > Local > OUTPUT


if InternalSite.URL is None and InternalSite.ServerName is not None:
  InternalSite.URL = 'http://' + InternalSite.ServerName

if InternalSite.SSLURL is None and InternalSite.SSLServerName is not None:
  InternalSite.SSLURL = 'https://' + InternalSite.SSLServerName

if Postgres.Database is None and DevLevel is not None:
  Postgres.Database = ID + '_' + str(DevLevel)

if Postgres.Username is None:
  Postgres.Username = ID

yield
###############################################################################
# Global > Local > Global > User > System > User > Global > Local > **OUTPUT**
# Only called if there were not validation errors

from os.path import join


# Build the nginx file

nginx = '''
  server
  {
    listen ''' + InternalSite.IP + ''':''' + str(InternalSite.Port) + ''';
    listen ''' + InternalSite.SSLIP + ''':''' + str(InternalSite.SSLPort) + ''' ssl;
    server_name ''' + InternalSite.ServerName + ''';
    ''' + ('''
    server_name ''' + InternalSite.SSLServerName + ''';
    ''' if InternalSite.ServerName != InternalSite.SSLServerName else '') + '''

    ssl_certificate     ''' + InternalSite.SSLCrt + ''';
    ssl_certificate_key ''' + InternalSite.SSLKey + ''';
    
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Scheme $scheme;
  
    client_max_body_size 1000m;

    location ^~ /FileStruct/
    {
      internal;
      alias ''' + FileStruct.Path + '''; #TRAILING SLASH IMPORTANT
    }

    location ~ \.(py|pyc|pyo|wsgi)$
    {
      return 403;
    }

    location ~ \..+$
    {
      root  ''' + join(Path, 'Web', 'InternalSite') + ''';
      expires max;
    }

    location /
    {
      add_header Cache-Control 'no-cache, no-store, max-age=0, must-revalidate';
      add_header Expires 'Thu, 01 Jan 1970 00:00:01 GMT';
      proxy_pass http://''' + InternalSite.ProxyIP + ''':''' + str(InternalSite.ProxyPort) + ''';
    }
  }
  '''


WriteFile('{0}-{1}-{2}-nginx.conf'.format(ID, User, DevLevel), nginx)


# Write the apache file

WriteFile('{0}-{1}-{2}-httpd.conf'.format(ID, User, DevLevel), '''
WSGIDaemonProcess Port''' + str(InternalSite.ProxyPort) + ''' processes=2 threads=3 python-path=''' + join(Path, 'Python') + '''
Listen ''' + InternalSite.ProxyIP + ''':''' + str(InternalSite.ProxyPort) + '''
NameVirtualHost ''' + InternalSite.ProxyIP + ''':''' + str(InternalSite.ProxyPort) + '''

# ''' + InternalSite.ServerName + '''
<VirtualHost ''' + InternalSite.ProxyIP + ''':''' + str(InternalSite.ProxyPort) + '''>
  DocumentRoot ''' + join(Path, 'Web', 'InternalSite') + '''
  AddDefaultCharset UTF-8
  
  RewriteEngine on
  RewriteOptions inherit
  
  # Forbid any python source files from being served.
  RewriteRule \.(py|pyc|pyo|wsgi)$  -  [F]
  
  WSGIScriptAlias / ''' + join(Path, 'Web', 'InternalSite', 'index.wsgi') + '''
  WSGIProcessGroup Port''' + str(InternalSite.ProxyPort) + '''
  
  LogLevel info
  ErrorLog ''' + join(Path, 'apache-error.log') + '''
</VirtualHost>

  ''')


# Write the local settings file
import time

WriteFile('Python-Project-Local.py', '''
# Generated by AutoConf system

DevLevel = ''' + repr(DevLevel) + '''
Identifier = ''' + repr(ID) + '''
Path = ''' + repr(Path) + '''

Database = {
  "Username": ''' + repr(Postgres.Username) + ''',
  "Host": ''' + repr(Postgres.Host) + ''',
  "Password": ''' + repr(Postgres.Password) + ''',
  "Port": ''' + repr(Postgres.Port) + ''',
  "Database": ''' + repr(Postgres.Database) + ''',
  }

FileStruct_Path = ''' + repr(FileStruct.Path) + '''

InternalSite_HTTP_URL = ''' + repr(InternalSite.URL) + '''
InternalSite_HTTPS_URL = ''' + repr(InternalSite.SSLURL) + '''

CacheTime = ''' + repr(str(int(time.time()))) + ''' 
  
JM_Username = ''' + repr(Jango.Username) + '''
JM_Password = ''' + repr(Jango.Password) + '''

  ''')
